diff --git a/CMakeLists.txt b/CMakeLists.txt
index 42f32e8bc3..cbb8d94ba0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -62,7 +62,7 @@ option(ENABLE_VIRTUAL_OPERATIONS "This option usually works with REGENERATE_CLIE
 option(REGENERATE_DEFAULTS "If set to ON, defaults mode configuration will be regenerated from the JSON definitions, this option involves some setup of python, java 8+, and maven" OFF)
 
 set(BUILD_ONLY "" CACHE STRING "A semi-colon delimited list of the projects to build")
-set(CPP_STANDARD "11" CACHE STRING "Flag to upgrade the C++ standard used. The default is 11. The minimum is 11.")
+set(CPP_STANDARD "17" CACHE STRING "Flag to upgrade the C++ standard used. The default is 11. The minimum is 11.")
 
 get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
 if (NOT ${is_multi_config})
diff --git a/aws-cpp-sdk-core/include/aws/core/utils/memory/stl/AWSString.h b/aws-cpp-sdk-core/include/aws/core/utils/memory/stl/AWSString.h
index 3cd013e3f8..54580070ab 100644
--- a/aws-cpp-sdk-core/include/aws/core/utils/memory/stl/AWSString.h
+++ b/aws-cpp-sdk-core/include/aws/core/utils/memory/stl/AWSString.h
@@ -11,6 +11,7 @@
 
 #include <functional>
 #include <string>
+#include <string_view>
 
 namespace Aws
 {
@@ -94,7 +95,58 @@ class String : public AndroidBasicString
 
 #else
 
-using String = std::basic_string< char, std::char_traits< char >, Aws::Allocator< char > >;
+using StringBase = std::basic_string< char, std::char_traits< char >, Aws::Allocator< char > >;
+
+class String : public StringBase
+{
+    public:
+        using Base = StringBase;
+		using Base::Base;
+		using Base::operator =;
+
+		String() = default;
+
+		String(String &&) = default;
+		String(const String &) = default;
+
+		String & operator = (String &&) = default;
+		String & operator = (const String &) = default;
+
+		String(std::basic_string_view<char> str) noexcept :
+			Base(str.data(), str.size()) {
+		}
+
+		String(const std::basic_string<char> &str) noexcept :
+			Base(str.data(), str.size()) {
+		}
+
+		String(const std::basic_string<char, std::char_traits<char>, Crt::StlAllocator<char>> &str) noexcept :
+			Base(str.data(), str.size()) {
+		}
+
+        template<typename TraitsT, typename AllocT>
+		String(const std::basic_string<char, TraitsT, AllocT> &str) noexcept :
+			Base(str.data(), str.size()) {
+		}
+
+        template<typename TraitsT>
+		String(std::basic_string_view<char, TraitsT> str) noexcept :
+			Base(str.data(), str.size()) {
+		}
+
+        template<typename TraitsT, typename AllocT>
+		String & operator = (const std::basic_string<char, TraitsT, AllocT> &str) noexcept {
+			Base::operator = (Base{str.data(), str.size()});
+			return *this;
+		}
+
+        template<typename TraitsT>
+		String & operator = (std::basic_string_view<char, TraitsT> str) noexcept {
+			Base::operator = (Base{str.data(), str.size()});
+			return *this;
+		}
+};
+
 
 #ifdef _WIN32
 using WString = std::basic_string< wchar_t, std::char_traits< wchar_t >, Aws::Allocator< wchar_t > >;
@@ -104,5 +156,20 @@ using WString = std::basic_string< wchar_t, std::char_traits< wchar_t >, Aws::Al
 
 } // namespace Aws
 
+namespace std {
+	// Specialization for std::hash<Guid> -- this implementation
+	// uses std::hash<std::string> on the stringification of the guid
+	// to calculate the hash
+	template <>
+	struct hash<::Aws::String> {
+		typedef ::Aws::String argument_type;
+		typedef std::size_t result_type;
+
+		result_type operator()(argument_type const &str) const {
+			std::hash<std::string> hasher;
+			return static_cast<result_type>(hasher(str.c_str()));
+		}
+	};
+}   // namespace STD
 
 
diff --git a/aws-cpp-sdk-s3/source/S3Client.cpp b/aws-cpp-sdk-s3/source/S3Client.cpp
index c307c89a94..3d969e3769 100644
--- a/aws-cpp-sdk-s3/source/S3Client.cpp
+++ b/aws-cpp-sdk-s3/source/S3Client.cpp
@@ -2439,7 +2439,7 @@ ListBucketsOutcome S3Client::ListBuckets() const
     return ListBucketsOutcome(computeEndpointOutcome.GetError());
   }
   ss << computeEndpointOutcome.GetResult().endpoint;
-  return ListBucketsOutcome(MakeRequest(ss.str(), Aws::Http::HttpMethod::HTTP_GET, Aws::Auth::SIGV4_SIGNER, "ListBuckets", computeEndpointOutcome.GetResult().signerRegion.c_str() /*signerRegionOverride*/, computeEndpointOutcome.GetResult().signerServiceName.c_str() /*signerServiceNameOverride*/));
+  return ListBucketsOutcome(MakeRequest(ss.str().c_str(), Aws::Http::HttpMethod::HTTP_GET, Aws::Auth::SIGV4_SIGNER, "ListBuckets", computeEndpointOutcome.GetResult().signerRegion.c_str() /*signerRegionOverride*/, computeEndpointOutcome.GetResult().signerServiceName.c_str() /*signerServiceNameOverride*/));
 }
 
 ListBucketsOutcomeCallable S3Client::ListBucketsCallable() const
diff --git a/cmake/platform/windows.cmake b/cmake/platform/windows.cmake
index 9b91570eaa..cf48ef7110 100644
--- a/cmake/platform/windows.cmake
+++ b/cmake/platform/windows.cmake
@@ -14,6 +14,8 @@ macro(apply_post_project_platform_settings)
         # Put all runtime outputs, including DLLs, executables into one directory, so as to avoid copying DLLs.
         set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
     endif()
+    # TRICE enforce setting of standard properly
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std:c++${CPP_STANDARD}" CACHE STRING "" FORCE)
     if(CMAKE_SIZEOF_VOID_P EQUAL 8)
         set(SDK_INSTALL_BINARY_PREFIX "${SDK_INSTALL_BINARY_PREFIX}/intel64")
     else()
